openapi: 3.0.3
info:
  title: Admin Cinema Api
  version: 1.0.0

servers:
  - url: '/api/admin'

security:
  - bearerAuth: []

tags:
  - name: Auth
    description: "Регистрация и получение токена"
  - name: Movie
    description: "Информация о киноновинках"
  - name: Tags
    description: "Информация о тегах"
  - name: Episodes
    description: "Информация о эпизодах"
  - name: Profile
    description: "Информация о профиле пользователя"


paths:
  /movies:
    get:
      tags:
        - Movie
      summary: "Получить список фильмов."
      description: "Список фильмов для отображения на Главном экране."
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/Movie'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/GetMoviesValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'
    post:
      tags:
        - Movie
      summary: "Создать новый фильм."
      description: "Создание нового фильма в системе."
      requestBody:
        $ref: '#/components/requestBodies/MovieForm'
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        400:
          $ref: '#/components/responses/SaveInfoBadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/PostMovieValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /movies/{movieId}/images:
    put:
      tags:
        - Movie
      summary: "Прикрепить медиа-файлы."
      description: "Прикрепить медиа-файлы к фильму."
      parameters:
        - name: movieId
          in: path
          description: "Id фильма"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/MovieContentForm'
      responses:
        204:
          description: "Successful saving of information"
        400:
          $ref: '#/components/responses/SaveInfoBadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/MovieValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /movies/{movieId}:
    patch:
      tags:
        - Movie
      summary: "Редактирование информацию о фильме."
      parameters:
        - name: movieId
          in: path
          description: "Id фильма"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Новые данные о фильме"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditMovieForm'
      responses:
        200:
          description: "Changes saved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Movie'
        400:
          $ref: '#/components/responses/SaveInfoBadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/MovieValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Movie
      summary: "Удалить фильм."
      description: "Удалить фильм из системы."
      parameters:
        - name: movieId
          in: path
          description: "Id фильма"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: "Movie successfully deleted"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/MovieValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /movies/{movieId}/episodes:
    post:
      tags:
        - Movie
      summary: "Создать новый эпизод."
      description: "Создание нового эпизода в системе."
      parameters:
        - name: movieId
          in: path
          description: "Id фильма"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/EpisodeForm'
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
        400:
          $ref: '#/components/responses/SaveInfoBadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/PostEpisodeValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /movies/{movieId}/episodes/{episodeId}/files:
    put:
      tags:
        - Movie
      summary: "Прикрепить медиа-файлы."
      description: "Прикрепить медиа-файлы к эпизоду."
      parameters:
        - name: movieId
          in: path
          description: "Id фильма"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: episodeId
          in: path
          description: "Id эпизода"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        $ref: '#/components/requestBodies/EpisodeContentForm'
      responses:
        204:
          description: "Successful saving of information"
        400:
          $ref: '#/components/responses/SaveInfoBadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/EpisodeValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /movies/{movieId}/episodes/{episodeId}:
    patch:
      tags:
        - Movie
      summary: "Редактирование информацию об эпизоде."
      parameters:
        - name: movieId
          in: path
          description: "Id фильма"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: episodeId
          in: path
          description: "Id эпизода"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Новые данные об эпизоде"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditEpisodeForm'
      responses:
        200:
          description: "Changes saved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Episode'
        400:
          $ref: '#/components/responses/SaveInfoBadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/EpisodeValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Movie
      summary: "Удалить эпизод."
      description: "Удалить эпизод из системы."
      parameters:
        - name: movieId
          in: path
          description: "Id фильма"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: episodeId
          in: path
          description: "Id эпизода"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: "Episode successfully deleted"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/EpisodeValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /tags:
    post:
      tags:
        - Tags
      summary: "Создать новый тег."
      description: "Создание нового тега в системе."
      requestBody:
        $ref: '#/components/requestBodies/TagForm'
      responses:
        200:
          description: "Successful operation"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          $ref: '#/components/responses/SaveInfoBadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/PostTagValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /tags/{tagId}:
    patch:
      tags:
        - Tags
      summary: "Редактирование информацию о теге."
      parameters:
        - name: tagId
          in: path
          description: "Id тега"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      requestBody:
        description: "Новые данные о теге"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/EditTagForm'
      responses:
        200:
          description: "Changes saved successfully"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/Tag'
        400:
          $ref: '#/components/responses/SaveInfoBadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/TagValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'
    delete:
      tags:
        - Tags
      summary: "Удалить тег."
      description: "Удалить тег из системы."
      parameters:
        - name: tagId
          in: path
          description: "Id тег"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: "Tag successfully deleted"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/TagValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /episodes/{episodeId}/comments/{commentId}:
    delete:
      tags:
        - Episodes
      summary: "Удалить комментарий."
      description: "Удалить комментарий эпизода."
      parameters:
        - name: episodeId
          in: path
          description: "Id эпизода"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
        - name: commentId
          in: path
          description: "Id комментария"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: "Comment successfully deleted"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/CommentValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /profile:
    delete:
      tags:
        - Profile
      summary: "Удаление профиля пользователя."
      parameters:
        - name: userId
          in: path
          description: "Id пользователя"
          required: true
          style: simple
          explode: false
          schema:
            type: string
            format: uuid
      responses:
        204:
          description: "User successfully deleted"
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        422:
          $ref: '#/components/responses/UserValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/login:
    post:
      tags:
        - Auth
      summary: "Аутентификация в системе"
      requestBody:
        description: "Данные для получения доступа к системе"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/AuthCredential'
        required: true
      responses:
        200:
          description: "Successful login"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenPair'
        400:
          $ref: '#/components/responses/BadRequestError'
        422:
          $ref: '#/components/responses/LoginValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'
      security: [ ]

  /profiles:
    get:
      tags:
        - Profile
      summary: "Получить все профили пользователей"
      responses:
        200:
          description: "User data"
          content:
            application/json:
              schema:
                type: array
                items:
                  $ref: '#/components/schemas/User'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        404:
          $ref: '#/components/responses/NotFound'
        500:
          $ref: '#/components/responses/InternalServerError'

  /auth/refresh:
    post:
      tags:
        - Auth
      summary: "Обноваление токена доступа с помощью токена обновления"
      requestBody:
        description: "Данные для обновления токена"
        content:
          application/json:
            schema:
              $ref: '#/components/schemas/RefreshToken'
      responses:
        200:
          description: "Auth tokens"
          content:
            application/json:
              schema:
                $ref: '#/components/schemas/AuthTokenPair'
        400:
          $ref: '#/components/responses/BadRequestError'
        401:
          $ref: '#/components/responses/UnauthorizedError'
        403:
          $ref: '#/components/responses/ForbiddenError'
        422:
          $ref: '#/components/responses/RefreshTokenValidationError'
        500:
          $ref: '#/components/responses/InternalServerError'

components:
  schemas:
    Error:
      type: object
      properties:
        code:
          type: string
        message:
          type: string
      required:
        - code

    RefreshToken:
      type: object
      properties:
        refreshToken:
          type: string
      required:
        - refreshToken

    AuthCredential:
      type: object
      properties:
        email:
          type: string
          description: "Email пользователя"
          format: string
          example: vasya@mail.com
        password:
          type: string
          description: "Пароль пользователя"
          format: password
          example: qwerty
      required:
        - email
        - password

    User:
      type: object
      properties:
        userId:
          type: string
          format: uuid
        firstName:
          type: string
          example: John
        lastName:
          type: string
          example: Johnson
        email:
          type: string
          example: john@gmail.com
        avatar:
          type: string
          format: url
      xml:
        name: User
      required:
        - userId
        - firstName
        - lastName
        - email

    AuthTokenPair:
      type: object
      properties:
        accessToken:
          type: string
        accessTokenExpiresIn:
          type: integer
          description: "Время валидности токена"
        refreshToken:
          type: string
        refreshTokenExpiresIn:
          type: integer
          description: "Время валидности токена"
      required:
        - accessToken
        - accessTokenExpiresIn
        - refreshToken
        - refreshTokenExpiresIn

    Movie:
      type: object
      properties:
        movieId:
          type: string
          format: uuid
        name:
          type: string
          example: The Magicians
        description:
          type: string
          example: 5 сезонов
        age:
          type: string
          enum:
            - 0+
            - 6+
            - 12+
            - 16+
            - 18+
        images:
          type: array
          items:
            type: string
        poster:
          type: string
        tags:
          type: array
          items:
            $ref: '#/components/schemas/Tag'
      xml:
        name: Movie
      required:
        - movieId
        - name
        - description
        - age
        - poster
        - tags
        - images

    MovieForm:
      type: object
      properties:
        name:
          type: string
          example: The Magicians
        description:
          type: string
          example: 5 сезонов
        age:
          type: string
          enum:
            - 0+
            - 6+
            - 12+
            - 16+
            - 18+
        tags:
          type: array
          items:
            type: string
            format: uuid
      xml:
        name: MovieForm
      required:
        - name
        - description
        - age
        - tags

    MovieContentForm:
      type: object
      properties:
        poster:
          type: string
          description: "Бинарное представление файла"
          format: binary
        images:
          type: array
          items:
            type: string
            description: "Бинарное представление файла"
            format: binary
        backgroundImage:
          type: string
          description: "Бинарное представление файла"
          format: binary
        foregroundImage:
          type: string
          description: "Бинарное представление файла"
          format: binary
      xml:
        name: MovieContentForm

    EditMovieForm:
      type: object
      properties:
        name:
          type: string
          example: The Magicians
        description:
          type: string
          example: 5 сезонов
        age:
          type: string
          enum:
            - 0+
            - 6+
            - 12+
            - 16+
            - 18+
        tags:
          type: array
          items:
            type: string
            format: uuid
      xml:
        name: EditMovieForm

    EpisodeForm:
      type: object
      properties:
        name:
          type: string
          example: "Escape From The Happy Place"
        description:
          type: string
          example: "Eliot is in his happy place, unaware that he is being possessed by the Monster. To have control over his body, Eliot must travel to the place that contains his greatest regret: turning down Quentin when he suggests he and Eliot should be together after their memories are restored of their life in past-Fillory, happily living together and raising a family."
        director:
          type: string
          example: "Meera Menon"
        stars:
          type: array
          items:
            type: string
            format: uuid
        runtime:
          type: integer
          example: 2640
        year:
          type: integer
          example: 2019
        filePath:
          type: string
      xml:
        name: EpisodeForm
      required:
        - name
        - description
        - director
        - stars
        - runtime
        - year

    EpisodeContentForm:
      type: object
      properties:
        preview:
          type: string
          description: "Бинарное представление файла"
          format: binary
        images:
          type: array
          items:
            type: string
            description: "Бинарное представление файла"
            format: binary
      xml:
        name: EpisodeContentForm

    EditEpisodeForm:
      type: object
      properties:
        name:
          type: string
          example: "Escape From The Happy Place"
        description:
          type: string
          example: "Eliot is in his happy place, unaware that he is being possessed by the Monster. To have control over his body, Eliot must travel to the place that contains his greatest regret: turning down Quentin when he suggests he and Eliot should be together after their memories are restored of their life in past-Fillory, happily living together and raising a family."
        director:
          type: string
          example: "Meera Menon"
        stars:
          type: array
          items:
            type: string
            format: uuid
        runtime:
          type: integer
          example: 2640
        year:
          type: integer
          example: 2019
        filePath:
          type: string
      xml:
        name: EditEpisodeForm

    Episode:
      type: object
      properties:
        episodeId:
          type: string
          format: uuid
        name:
          type: string
          example: Escape From The Happy Place
        description:
          type: string
          example: 'Eliot is in his happy place, unaware that he is being possessed by the Monster. To have control over his body, Eliot must travel to the place that contains his greatest regret: turning down Quentin when he suggests he and Eliot should be together after their memories are restored of their life in past-Fillory, happily living together and raising a family.'
        director:
          type: string
          example: Meera Menon
        stars:
          type: array
          items:
            type: string
            example: Jason Ralph
        year:
          type: string
          example: "2019"
        images:
          type: array
          items:
            type: string
        runtime:
          type: integer
          description: Продолжительность эпизода в секундах
          example: 2640
        preview:
          type: string
        filePath:
          type: string
      required:
        - episodeId
        - description
        - director
        - stars
        - year
        - runtime
        - preview
        - filePath
        - images
        - name

    Tag:
      type: object
      properties:
        tagId:
          type: string
          format: uuid
        tagName:
          type: string
          example: Комедия
        categoryName:
          type: string
          example: Жанры
      required:
        - tagId
        - tagName
        - categoryName

    TagForm:
      type: object
      properties:
        tagName:
          type: string
          example: Комедия
        categoryName:
          type: string
          example: Жанры
      xml:
        name: TagForm
      required:
        - tagName
        - categoryName

    EditTagForm:
      type: object
      properties:
        tagName:
          type: string
          example: Комедия
        categoryName:
          type: string
          example: Жанры
      xml:
        name: EditTagForm

  responses:
    InternalServerError:
      description: 'Internal Server Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          example:
            code: 'InternalServerError'
            message: 'Something went wrong'

    UnauthorizedError:
      description: "Unauthorized Error"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            UnauthorizedError:
              value:
                code: 'UnauthorizedError'
            RefreshTokenNotFoundError:
              value:
                code: 'RefreshTokenNotFoundError'
            UserNotFoundError:
              value:
                code: 'UserNotFoundError'
            RefreshTokenExpiredError:
              value:
                code: 'RefreshTokenExpiredError'

    NotFound:
      description: "Not Found"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            BadRequestError:
              value:
                code: 'NotFound'

    BadRequestError:
      description: "Bad Request Error"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            BadRequestError:
              value:
                code: 'BadRequestError'

    DeleteInfoBadRequestError:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            BadRequestError:
              value:
                code: 'WrongData'
                message: 'Problem with delete'

    ForbiddenError:
      description: "Forbidden Error"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            ForbiddenError:
              value:
                code: 'ForbiddenError'

    MovieValidationError:
      description: 'Validation Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            WrongMovieId:
              value:
                code: 'WrongMovieId'
                message: 'Invalid movie id'

    EpisodeValidationError:
      description: 'Validation Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            WrongMovieId:
              value:
                code: 'WrongEpisodeId'
                message: 'Invalid episode id'

    TagValidationError:
      description: 'Validation Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            WrongMovieId:
              value:
                code: 'WrongTagId'
                message: 'Invalid tag id'

    SaveInfoBadRequestError:
      description: "Bad Request"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            BadRequestError:
              value:
                code: 'WrongData'
                message: 'Problem with save'

    PostMovieValidationError:
      description: 'Validation Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            WrongFilterValue:
              value:
                code: 'PostMovieValidationError'
                message: 'Field must not be empty'

    PostEpisodeValidationError:
      description: 'Validation Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            WrongFilterValue:
              value:
                code: 'PostEpisodeValidationError'
                message: 'Field must not be empty'

    PostTagValidationError:
      description: 'Validation Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            WrongFilterValue:
              value:
                code: 'PostTagValidationError'
                message: 'Field must not be empty'

    CommentValidationError:
      description: 'Validation Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            WrongMovieId:
              value:
                code: 'WrongCommentId'
                message: 'Invalid comment id'

    UserValidationError:
      description: 'Validation Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            WrongMovieId:
              value:
                code: 'WrongUserId'
                message: 'Invalid user id'

    LoginValidationError:
      description: "Login Validation Error"
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            LoginValidationError:
              value:
                code: 'LoginValidationError'

    RefreshTokenValidationError:
      description: 'Validation error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            RefreshTokenValidationError:
              value:
                code: 'RefreshTokenValidationError'
                message: 'Invalid token'

    GetMoviesValidationError:
      description: 'Validation Error'
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/Error'
          examples:
            WrongFilterValue:
              value:
                code: 'WrongFilterValue'
                message: 'Invalid filter value'

  requestBodies:
    MovieForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MovieForm'

    EpisodeForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EpisodeForm'

    TagForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/TagForm'

    MovieContentForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/MovieContentForm'

    EpisodeContentForm:
      content:
        application/json:
          schema:
            $ref: '#/components/schemas/EpisodeContentForm'

  securitySchemes:
    bearerAuth:
      type: http
      description: |-
        Для доступа к API с валидным JWT токеном небходимо для каждого защищенного узла отправлять токен доступа в заголовке Authorization.

        Правильный и валидный JWT токен генерируется по API и возвращается после выполнения запроса /api/auth/refresh на получение токена доступа к API.

        Когда токен доступа протухнет, то для получения нового необходимо сгенерировать еще один.

        При протухании токена обновления необходимо разлогинить пользователя.

        Например,

        Authorization: Bearer <здесь ваш JWT токен>
      scheme: bearer
      bearerFormat: JWT